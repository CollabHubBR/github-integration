{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CollabHubBR - GitHub Integration","text":"<p>Este reposit\u00f3rio cont\u00e9m o c\u00f3digo-fonte do Microsservi\u00e7o de Integra\u00e7\u00e3o GitHub API do CollabHubBR, a plataforma brasileira de coordena\u00e7\u00e3o e organiza\u00e7\u00e3o de projetos de c\u00f3digo-aberto. Desenvolvido em Python com o framework FastAPI, este servi\u00e7o \u00e9 crucial para enriquecer a experi\u00eancia do usu\u00e1rio, buscando e processando dados diretamente do GitHub.</p> <p>A principal responsabilidade deste microsservi\u00e7o \u00e9 buscar dados de reposit\u00f3rios do GitHub para serem apresentados na p\u00e1gina do projeto no CollabHubBR. Isso inclui tanto informa\u00e7\u00f5es gerais do reposit\u00f3rio (estrelas, forks, descri\u00e7\u00e3o, linguagens, etc.) quanto dados para compor os dashboards de m\u00e9tricas (commits, issues, pull requests, contribuidores). Para garantir acesso seguro e abrangente, o servi\u00e7o utiliza a GitHub API, com suporte para autentica\u00e7\u00e3o via Chave Privada (GitHub Apps) quando necess\u00e1rio, permitindo a recupera\u00e7\u00e3o de informa\u00e7\u00f5es mais detalhadas e a\u00e7\u00f5es espec\u00edficas. Os dados s\u00e3o processados e, quando aplic\u00e1vel, persistidos no PostgreSQL para otimiza\u00e7\u00e3o e hist\u00f3rico.</p>"},{"location":"#stack","title":"Stack","text":""},{"location":"#arquitetura","title":"Arquitetura","text":"<p>A arquitetura do Microsservi\u00e7o de Integra\u00e7\u00e3o GitHub API do CollabHubBR segue os princ\u00edpios de microsservi\u00e7os, com foco em processamento eficiente de dados externos e integra\u00e7\u00e3o segura. Adotamos uma estrutura modular para organizar nossos modelos, rotas, servi\u00e7os, reposit\u00f3rios e configura\u00e7\u00f5es, visando a clareza e a facilidade de manuten\u00e7\u00e3o.</p> <pre><code>flowchart TD\n\n    A[Outros Microsservi\u00e7os] --&gt; B{API Gateway}\n    B --&gt; C[Microsservi\u00e7o de Integra\u00e7\u00e3o GitHub API]\n    C --&gt; D(Controller/Router)\n    D --&gt; E(Services)</code></pre> <p>Para todos os efeitos, a API considera o retorno atrav\u00e9s da estrutura abaixo, padronizando a interpreta\u00e7\u00e3o de quando um retorno ocorrer da forma esperada ou n\u00e3o com <code>app.schemas.payload.DefaultPayload</code>:</p> Python<pre><code>{\n  \"error\": bool,\n  \"data\": {...}\n}\n</code></pre> <p>Onde <code>\"error\"</code> indica simplesmente se o retorno foi um sucesso ou n\u00e3o, enquanto <code>\"data\"</code> indica o corpo da resposta, tanto em caso de sucesso, variando conforme endpoint, ou em caso de erro, seguindo a estrutura a seguir:</p> JSON<pre><code>{\n  \"error\": true,\n  \"data\": {\n    \"error_type\": \"GitHubFetchError\",\n    \"error\": \"No result found for username = 'username' and repo = 'repo\"\n  }\n}\n</code></pre> <p>Os tipos de erros catalogados podem ser encontrados em <code>app.schemas.payload.ErrorType</code>, um <code>enum.Enum</code> nativo do Python.</p>"},{"location":"#estrutura-de-pastas","title":"Estrutura de Pastas","text":"<p>Abaixo, descrevemos a organiza\u00e7\u00e3o principal das pastas do projeto:</p> <ul> <li><code>app/</code>: Cont\u00e9m todo o c\u00f3digo-fonte da aplica\u00e7\u00e3o.</li> <li><code>api/</code>: Defini\u00e7\u00e3o das rotas e endpoints da API (FastAPI <code>APIRouter</code>).<ul> <li><code>v1/</code>: Vers\u00f5es da API.</li> <li><code>{filename}.py</code>: Arquivos para cada grupo de endpoints (ex: <code>user.py</code>).</li> </ul> </li> <li><code>schemas/</code>: Modelos Pydantic para valida\u00e7\u00e3o de entrada e sa\u00edda de dados.</li> <li><code>services/</code>: L\u00f3gica de neg\u00f3cio e intera\u00e7\u00f5es com a GitHub API.<ul> <li><code>{filename}.py</code>: Fun\u00e7\u00f5es para interagir com a GitHub API (autentica\u00e7\u00e3o, requisi\u00e7\u00f5es).</li> </ul> </li> <li><code>utils.py</code>: Fun\u00e7\u00f5es utilit\u00e1rias e helpers (ex: constante da API do GitHub).</li> <li><code>main.py</code>: Ponto de entrada principal da aplica\u00e7\u00e3o FastAPI.</li> <li><code>tests/</code>: Arquivos para testes unit\u00e1rios e de integra\u00e7\u00e3o.</li> </ul>"},{"location":"#instalacao-de-dependencias","title":"Instala\u00e7\u00e3o de Depend\u00eancias","text":"Bash<pre><code>uv sync\n</code></pre>"},{"location":"#servidor-local","title":"Servidor Local","text":"Bash<pre><code>uv run task dev\n</code></pre>"},{"location":"#servidor-de-prod","title":"Servidor de Prod","text":"Bash<pre><code>uv run fastapi run\n</code></pre>"},{"location":"#execucao-de-testes","title":"Execu\u00e7\u00e3o de Testes","text":"Bash<pre><code>uv run pytest\n</code></pre>"},{"location":"#linter","title":"Linter","text":"Bash<pre><code>uv run task lint\n</code></pre>"},{"location":"#recriar-documentacao","title":"Recriar Documenta\u00e7\u00e3o","text":"Bash<pre><code>uv run task doc\n</code></pre>"},{"location":"#to-do-list","title":"To-Do List","text":"<p>Confira a To-Do List aqui</p>"},{"location":"#contrib","title":"Contrib","text":"<p>Antes de contribuir ativamente com o projeto \u00e9 fortemente recomendada a leitura dos documentos abaixo:</p> <ul> <li>C\u00f3digo de Conduta</li> <li>Contribuindo</li> <li>Seguran\u00e7a</li> <li>Suporte</li> </ul>"},{"location":"#licenca","title":"Licen\u00e7a","text":"<p>This project is under MIT - Massachusetts Institute of Technology. A short and simple permissive license with conditions only requiring preservation of copyright and license notices. Licensed works, modifications, and larger works may be distributed under different terms and without source code.</p>"},{"location":"Codebase/__init__.py/","title":"File: <code>__init__.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/__init__.py/#imports","title":"Imports","text":"<p>NO IMPORT DEFINED HERE</p>"},{"location":"Codebase/__init__.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/__init__.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/__init__.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/__init__.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/main.py/","title":"File: <code>main.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/main.py/#imports","title":"Imports","text":""},{"location":"Codebase/main.py/#import-fastapi","title":"<code>import FastAPI</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import FastAPI\n</code></pre>"},{"location":"Codebase/main.py/#import-router","title":"<code>import router</code>","text":"<p>Path: <code>app.api.v1.project</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.api.v1.project import router\n</code></pre>"},{"location":"Codebase/main.py/#import-router_1","title":"<code>import router</code>","text":"<p>Path: <code>app.api.v1.user</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.api.v1.user import router\n</code></pre>"},{"location":"Codebase/main.py/#import-defaultpayload","title":"<code>import DefaultPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import DefaultPayload\n</code></pre>"},{"location":"Codebase/main.py/#consts","title":"Consts","text":""},{"location":"Codebase/main.py/#app","title":"<code>app</code>","text":"<p>Type: <code>Unknown</code></p> <p>Value: <code>FastAPI(title='CollabHubBR - GitHub Integration', summary='API de integra\u00e7\u00e3o, meio-de-campo entre o CollabHubBR e o GitHub.', description='Esta API possibilita a integra\u00e7\u00e3o com o GitHub de forma controlada e personalizada, enquanto retorna apenas os dados necess\u00e1rios para o funcionamento da plataforma.', version='1.0.0')</code></p> SNIPPET Python<pre><code>app = FastAPI(title='CollabHubBR - GitHub Integration', summary='API de integra\u00e7\u00e3o, meio-de-campo entre o CollabHubBR e o GitHub.', description='Esta API possibilita a integra\u00e7\u00e3o com o GitHub de forma controlada e personalizada, enquanto retorna apenas os dados necess\u00e1rios para o funcionamento da plataforma.', version='1.0.0')\n</code></pre>"},{"location":"Codebase/main.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/main.py/#functions","title":"Functions","text":""},{"location":"Codebase/main.py/#def-root","title":"<code>def root</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>app.get('/')</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>The hub of the main endpoint family.</p> <p>Just gets nothing and return all the endpoints of this master path.</p> <p>:returns: DefaultPayload with the existing endpoints.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>@app.get('/')\nasync def root() -&gt; DefaultPayload:\n    \"\"\"\n    The hub of the main endpoint family.\n\n    Just gets nothing and return all the endpoints of this master path.\n\n    :returns: DefaultPayload with the existing endpoints.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    endpoint_list: list[tuple[str, str]] = [('/', 'List possible endpoints'), ('/docs', 'Swagger-based documentation'), ('/api/v1', 'API version 1')]\n    return DefaultPayload(error=False, data={'endpoints': [{'endpoint': data[0], 'description': data[1]} for data in endpoint_list]})\n</code></pre>"},{"location":"Codebase/main.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/utils.py/","title":"File: <code>utils.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/utils.py/#imports","title":"Imports","text":""},{"location":"Codebase/utils.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/utils.py/#consts","title":"Consts","text":""},{"location":"Codebase/utils.py/#github_api_url","title":"<code>GITHUB_API_URL</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'https://api.github.com'</code></p> SNIPPET Python<pre><code>GITHUB_API_URL: Final[str] = 'https://api.github.com'\n</code></pre>"},{"location":"Codebase/utils.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/utils.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/utils.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/api/__init__.py/","title":"File: <code>__init__.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.api</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/api/__init__.py/#imports","title":"Imports","text":"<p>NO IMPORT DEFINED HERE</p>"},{"location":"Codebase/api/__init__.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/api/__init__.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/api/__init__.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/api/__init__.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/api/v1/__init__.py/","title":"File: <code>__init__.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.api.v1</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/api/v1/__init__.py/#imports","title":"Imports","text":"<p>NO IMPORT DEFINED HERE</p>"},{"location":"Codebase/api/v1/__init__.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/api/v1/__init__.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/api/v1/__init__.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/api/v1/__init__.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/api/v1/project.py/","title":"File: <code>project.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.api.v1</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/api/v1/project.py/#imports","title":"Imports","text":""},{"location":"Codebase/api/v1/project.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#import-apirouter","title":"<code>import APIRouter</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import APIRouter\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#import-response","title":"<code>import Response</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import Response\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#import-defaultpayload","title":"<code>import DefaultPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import DefaultPayload\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#import-get_global_repo_data_controller","title":"<code>import get_global_repo_data_controller</code>","text":"<p>Path: <code>app.services.project</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.services.project import get_global_repo_data_controller\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#consts","title":"Consts","text":""},{"location":"Codebase/api/v1/project.py/#prefix","title":"<code>PREFIX</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'/api/v1/project'</code></p> SNIPPET Python<pre><code>PREFIX: Final[str] = '/api/v1/project'\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/api/v1/project.py/#functions","title":"Functions","text":""},{"location":"Codebase/api/v1/project.py/#def-endpoints","title":"<code>def endpoints</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>router.get('/')</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>The hub of this endpoint family.</p> <p>Just gets nothing and return all the endpoints of this sub-path.</p> <p>:returns: DefaultPayload with the existing endpoints.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>@router.get('/')\nasync def endpoints() -&gt; DefaultPayload:\n    \"\"\"\n    The hub of this endpoint family.\n\n    Just gets nothing and return all the endpoints of this sub-path.\n\n    :returns: DefaultPayload with the existing endpoints.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    endpoint_list: list[tuple[str, str]] = [('/', 'List possible endpoints'), ('/{username}/{repo}', 'Returns repo general content')]\n    return DefaultPayload(error=False, data={'endpoints': [{'endpoint': f'{PREFIX}{data[0]}', 'description': data[1]} for data in endpoint_list]})\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#def-get_global_repo_data_view","title":"<code>def get_global_repo_data_view</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>router.get('/{username}/{repo}')</code></p> <p>Args: <code>username: str, repo: str, _response: FastAPIResponse</code></p> <p>Kwargs: <code>None</code></p> <p>The \"View\" of a MVC arch for this endpoint.</p> <p>By receiving the username and a repository, this coroutine calls it's \"Controller\" equivalent for data processing; just a way to handle internal structure.</p> <p>:param username: Owner of the repository.</p> <p>:type username: str</p> <p>:param repo: Repository's name itself.</p> <p>:type repo: str</p> <p>:param _response: Internal var for handling status code.</p> <p>:type _response: fastapi.Response</p> <p>:returns: DefaultPayload with the repo data.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>@router.get('/{username}/{repo}')\nasync def get_global_repo_data_view(username: str, repo: str, _response: FastAPIResponse) -&gt; DefaultPayload:\n    \"\"\"\n    The \"View\" of a MVC arch for this endpoint.\n\n    By receiving the username and a repository, this coroutine calls it's \"Controller\"\n    equivalent for data processing; just a way to handle internal structure.\n\n    :param username: Owner of the repository.\n    :type username: str\n    :param repo: Repository's name itself.\n    :type repo: str\n    :param _response: Internal var for handling status code.\n    :type _response: fastapi.Response\n    :returns: DefaultPayload with the repo data.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    return await get_global_repo_data_controller(username, repo, _response)\n</code></pre>"},{"location":"Codebase/api/v1/project.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/api/v1/user.py/","title":"File: <code>user.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.api.v1</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/api/v1/user.py/#imports","title":"Imports","text":""},{"location":"Codebase/api/v1/user.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#import-apirouter","title":"<code>import APIRouter</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import APIRouter\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#import-response","title":"<code>import Response</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import Response\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#import-defaultpayload","title":"<code>import DefaultPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import DefaultPayload\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#import-get_github_user_data_controller","title":"<code>import get_github_user_data_controller</code>","text":"<p>Path: <code>app.services.user</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.services.user import get_github_user_data_controller\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#import-get_github_user_repos_controller","title":"<code>import get_github_user_repos_controller</code>","text":"<p>Path: <code>app.services.user</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.services.user import get_github_user_repos_controller\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#consts","title":"Consts","text":""},{"location":"Codebase/api/v1/user.py/#prefix","title":"<code>PREFIX</code>","text":"<p>Type: <code>Final[str]</code></p> <p>Value: <code>'/api/v1/user'</code></p> SNIPPET Python<pre><code>PREFIX: Final[str] = '/api/v1/user'\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/api/v1/user.py/#functions","title":"Functions","text":""},{"location":"Codebase/api/v1/user.py/#def-endpoints","title":"<code>def endpoints</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>router.get('/')</code></p> <p>Args: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>The hub of this endpoint family.</p> <p>Just gets nothing and return all the endpoints of this sub-path.</p> <p>:returns: DefaultPayload with the existing endpoints.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>@router.get('/')\nasync def endpoints() -&gt; DefaultPayload:\n    \"\"\"\n    The hub of this endpoint family.\n\n    Just gets nothing and return all the endpoints of this sub-path.\n\n    :returns: DefaultPayload with the existing endpoints.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    endpoint_list: list[tuple[str, str]] = [('/', 'List possible endpoints'), ('/{username}', \"Returns GitHub's user data\"), ('/{username}/repos', 'Returns user repos')]\n    return DefaultPayload(error=False, data={'endpoints': [{'endpoint': f'{PREFIX}{data[0]}', 'description': data[1]} for data in endpoint_list]})\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#def-get_github_user_data_view","title":"<code>def get_github_user_data_view</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>router.get('/{username}')</code></p> <p>Args: <code>username: str, _response: FastAPIResponse</code></p> <p>Kwargs: <code>None</code></p> <p>The \"View\" of a MVC arch for this endpoint.</p> <p>By receiving the username, this coroutine calls it's \"Controller\" equivalent for data processing; just a way to handle internal structure.</p> <p>:param username: Owner of the repository.</p> <p>:type username: str</p> <p>:param _response: Internal var for handling status code.</p> <p>:type _response: fastapi.Response</p> <p>:returns: DefaultPayload with the user data.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>@router.get('/{username}')\nasync def get_github_user_data_view(username: str, _response: FastAPIResponse) -&gt; DefaultPayload:\n    \"\"\"\n    The \"View\" of a MVC arch for this endpoint.\n\n    By receiving the username, this coroutine calls it's \"Controller\" equivalent\n    for data processing; just a way to handle internal structure.\n\n    :param username: Owner of the repository.\n    :type username: str\n    :param _response: Internal var for handling status code.\n    :type _response: fastapi.Response\n    :returns: DefaultPayload with the user data.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    return await get_github_user_data_controller(username, _response)\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#def-get_github_user_repos_view","title":"<code>def get_github_user_repos_view</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>router.get('/{username}/repos')</code></p> <p>Args: <code>username: str, _response: FastAPIResponse</code></p> <p>Kwargs: <code>None</code></p> <p>The \"View\" of a MVC arch for this endpoint.</p> <p>By receiving the username, this coroutine calls it's \"Controller\" equivalent for data processing; just a way to handle internal structure.</p> <p>:param username: Owner of the repository.</p> <p>:type username: str</p> <p>:param _response: Internal var for handling status code.</p> <p>:type _response: fastapi.Response</p> <p>:returns: DefaultPayload with the user's repos.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>@router.get('/{username}/repos')\nasync def get_github_user_repos_view(username: str, _response: FastAPIResponse) -&gt; DefaultPayload:\n    \"\"\"\n    The \"View\" of a MVC arch for this endpoint.\n\n    By receiving the username, this coroutine calls it's \"Controller\" equivalent\n    for data processing; just a way to handle internal structure.\n\n    :param username: Owner of the repository.\n    :type username: str\n    :param _response: Internal var for handling status code.\n    :type _response: fastapi.Response\n    :returns: DefaultPayload with the user's repos.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    return await get_github_user_repos_controller(username, _response)\n</code></pre>"},{"location":"Codebase/api/v1/user.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/schemas/error.py/","title":"File: <code>error.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.schemas</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/schemas/error.py/#imports","title":"Imports","text":""},{"location":"Codebase/schemas/error.py/#import-enum","title":"<code>import Enum</code>","text":"<p>Path: <code>enum</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from enum import Enum\n</code></pre>"},{"location":"Codebase/schemas/error.py/#import-basemodel","title":"<code>import BaseModel</code>","text":"<p>Path: <code>pydantic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from pydantic import BaseModel\n</code></pre>"},{"location":"Codebase/schemas/error.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/schemas/error.py/#classes","title":"Classes","text":""},{"location":"Codebase/schemas/error.py/#class-errortype","title":"<code>class ErrorType</code>","text":"<p>Parents: <code>Enum</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class ErrorType(Enum):\n    APIError = 'APIInternalError'\n    GitHubFetchError = 'GitHubFetchError'\n</code></pre>"},{"location":"Codebase/schemas/error.py/#class-errorpayload","title":"<code>class ErrorPayload</code>","text":"<p>Parents: <code>BaseModel</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class ErrorPayload(BaseModel):\n    error_type: ErrorType\n    error: str\n</code></pre>"},{"location":"Codebase/schemas/error.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/schemas/error.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/schemas/payload.py/","title":"File: <code>payload.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.schemas</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/schemas/payload.py/#imports","title":"Imports","text":""},{"location":"Codebase/schemas/payload.py/#import-final","title":"<code>import Final</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Final\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#import-basemodel","title":"<code>import BaseModel</code>","text":"<p>Path: <code>pydantic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from pydantic import BaseModel\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#import-errorpayload","title":"<code>import ErrorPayload</code>","text":"<p>Path: <code>app.schemas.error</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.error import ErrorPayload\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#import-projectpayload","title":"<code>import ProjectPayload</code>","text":"<p>Path: <code>app.schemas.project</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.project import ProjectPayload\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#import-githubuserdata","title":"<code>import GithubUserData</code>","text":"<p>Path: <code>app.schemas.user</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.user import GithubUserData\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#import-githubuserrepos","title":"<code>import GithubUserRepos</code>","text":"<p>Path: <code>app.schemas.user</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.user import GithubUserRepos\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/schemas/payload.py/#classes","title":"Classes","text":""},{"location":"Codebase/schemas/payload.py/#class-defaultpayload","title":"<code>class DefaultPayload</code>","text":"<p>Parents: <code>BaseModel</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class DefaultPayload(BaseModel):\n    error: bool\n    data: ErrorPayload | ProjectPayload | GithubUserData | list[GithubUserRepos] | dict[str, list[dict[str, str]]]\n</code></pre>"},{"location":"Codebase/schemas/payload.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/schemas/payload.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/schemas/project.py/","title":"File: <code>project.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.schemas</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/schemas/project.py/#imports","title":"Imports","text":""},{"location":"Codebase/schemas/project.py/#import-basemodel","title":"<code>import BaseModel</code>","text":"<p>Path: <code>pydantic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from pydantic import BaseModel\n</code></pre>"},{"location":"Codebase/schemas/project.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/schemas/project.py/#classes","title":"Classes","text":""},{"location":"Codebase/schemas/project.py/#class-projectpayload","title":"<code>class ProjectPayload</code>","text":"<p>Parents: <code>BaseModel</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class ProjectPayload(BaseModel):\n    full_name: str\n    language: str\n    description: str\n    homepage: str\n    readme: str\n    open_issues_count: int\n    forks_count: int\n</code></pre>"},{"location":"Codebase/schemas/project.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/schemas/project.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/schemas/user.py/","title":"File: <code>user.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.schemas</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/schemas/user.py/#imports","title":"Imports","text":""},{"location":"Codebase/schemas/user.py/#import-datetime","title":"<code>import datetime</code>","text":"<p>Path: <code>datetime</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from datetime import datetime\n</code></pre>"},{"location":"Codebase/schemas/user.py/#import-basemodel","title":"<code>import BaseModel</code>","text":"<p>Path: <code>pydantic</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from pydantic import BaseModel\n</code></pre>"},{"location":"Codebase/schemas/user.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/schemas/user.py/#classes","title":"Classes","text":""},{"location":"Codebase/schemas/user.py/#class-githubuserinfodata","title":"<code>class GithubUserInfoData</code>","text":"<p>Parents: <code>BaseModel</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class GithubUserInfoData(BaseModel):\n    login: str\n    id: int\n    node_id: str\n    avatar_url: str\n    gravatar_id: str\n    url: str\n    html_url: str\n    followers_url: str\n    following_url: str\n    gists_url: str\n    starred_url: str\n    subscriptions_url: str\n    organizations_url: str\n    repos_url: str\n    events_url: str\n    received_events_url: str\n    type: str\n    user_view_type: str\n    site_admin: bool\n</code></pre>"},{"location":"Codebase/schemas/user.py/#class-githubuserdata","title":"<code>class GithubUserData</code>","text":"<p>Parents: <code>GithubUserInfoData</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class GithubUserData(GithubUserInfoData):\n    name: str\n    company: str | None\n    blog: str\n    location: str | None\n    email: str | None\n    hireable: str | None\n    bio: str | None\n    twitter_username: str | None\n    public_repos: int\n    public_gists: int\n    followers: int\n    following: int\n    created_at: datetime\n    updated_at: datetime\n</code></pre>"},{"location":"Codebase/schemas/user.py/#class-githubuserrepolicense","title":"<code>class GithubUserRepoLicense</code>","text":"<p>Parents: <code>BaseModel</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class GithubUserRepoLicense(BaseModel):\n    key: str\n    name: str\n    spdx_id: str\n    url: str | None\n    node_id: str\n</code></pre>"},{"location":"Codebase/schemas/user.py/#class-githubuserrepos","title":"<code>class GithubUserRepos</code>","text":"<p>Parents: <code>BaseModel</code></p> <p>Decorators: <code>None</code></p> <p>Kwargs: <code>None</code></p> <p>No <code>docstring</code> provided.</p> SNIPPET Python<pre><code>class GithubUserRepos(BaseModel):\n    id: int\n    node_id: str\n    name: str\n    full_name: str\n    private: bool\n    owner: GithubUserInfoData\n    html_url: str\n    description: str | None\n    fork: bool\n    url: str | None\n    forks_url: str\n    keys_url: str\n    collaborators_url: str\n    teams_url: str\n    hooks_url: str\n    issue_events_url: str\n    events_url: str\n    assignees_url: str\n    branches_url: str\n    tags_url: str\n    blobs_url: str\n    git_tags_url: str\n    git_refs_url: str\n    trees_url: str\n    statuses_url: str\n    languages_url: str\n    stargazers_url: str\n    contributors_url: str\n    subscribers_url: str\n    subscription_url: str\n    commits_url: str\n    git_commits_url: str\n    comments_url: str\n    issue_comment_url: str\n    contents_url: str\n    compare_url: str\n    merges_url: str\n    archive_url: str\n    downloads_url: str\n    issues_url: str\n    pulls_url: str\n    milestones_url: str\n    notifications_url: str\n    labels_url: str\n    releases_url: str\n    deployments_url: str\n    created_at: datetime\n    updated_at: datetime\n    pushed_at: datetime\n    git_url: str\n    ssh_url: str\n    clone_url: str\n    svn_url: str\n    homepage: str | None\n    size: int\n    stargazers_count: int\n    watchers_count: int\n    language: str | None\n    has_issues: bool\n    has_projects: bool\n    has_downloads: bool\n    has_wiki: bool\n    has_pages: bool\n    has_discussions: bool\n    forks_count: int\n    mirror_url: str | None\n    archived: bool\n    disabled: bool\n    open_issues_count: int\n    license: GithubUserRepoLicense | None\n    allow_forking: bool\n    is_template: bool\n    web_commit_signoff_required: bool\n    topics: list[str]\n    visibility: str\n    forks: int\n    open_issues: int\n    watchers: int\n    default_branch: str\n</code></pre>"},{"location":"Codebase/schemas/user.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/schemas/user.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/services/__init__.py/","title":"File: <code>__init__.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.services</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/services/__init__.py/#imports","title":"Imports","text":"<p>NO IMPORT DEFINED HERE</p>"},{"location":"Codebase/services/__init__.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/services/__init__.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/services/__init__.py/#functions","title":"Functions","text":"<p>NO FUNCTION DEFINED HERE</p>"},{"location":"Codebase/services/__init__.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/services/project.py/","title":"File: <code>project.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.services</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/services/project.py/#imports","title":"Imports","text":""},{"location":"Codebase/services/project.py/#import-gather","title":"<code>import gather</code>","text":"<p>Path: <code>asyncio</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from asyncio import gather\n</code></pre>"},{"location":"Codebase/services/project.py/#import-coroutine","title":"<code>import Coroutine</code>","text":"<p>Path: <code>collections.abc</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from collections.abc import Coroutine\n</code></pre>"},{"location":"Codebase/services/project.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/services/project.py/#import-response","title":"<code>import Response</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import Response\n</code></pre>"},{"location":"Codebase/services/project.py/#import-status","title":"<code>import status</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import status\n</code></pre>"},{"location":"Codebase/services/project.py/#import-asyncclient","title":"<code>import AsyncClient</code>","text":"<p>Path: <code>httpx</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from httpx import AsyncClient\n</code></pre>"},{"location":"Codebase/services/project.py/#import-response_1","title":"<code>import Response</code>","text":"<p>Path: <code>httpx</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from httpx import Response\n</code></pre>"},{"location":"Codebase/services/project.py/#import-errortype","title":"<code>import ErrorType</code>","text":"<p>Path: <code>app.schemas.error</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.error import ErrorType\n</code></pre>"},{"location":"Codebase/services/project.py/#import-defaultpayload","title":"<code>import DefaultPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import DefaultPayload\n</code></pre>"},{"location":"Codebase/services/project.py/#import-errorpayload","title":"<code>import ErrorPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import ErrorPayload\n</code></pre>"},{"location":"Codebase/services/project.py/#import-projectpayload","title":"<code>import ProjectPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import ProjectPayload\n</code></pre>"},{"location":"Codebase/services/project.py/#import-github_api_url","title":"<code>import GITHUB_API_URL</code>","text":"<p>Path: <code>app.utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.utils import GITHUB_API_URL\n</code></pre>"},{"location":"Codebase/services/project.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/services/project.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/services/project.py/#functions","title":"Functions","text":""},{"location":"Codebase/services/project.py/#def-get_global_repo_data_controller","title":"<code>def get_global_repo_data_controller</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>username: str, repo: str, _response: FastAPIResponse</code></p> <p>Kwargs: <code>None</code></p> <p>Gets the repo and it's username and returns the required data.</p> <p>By receiving the username and a repository, this coroutine fetches the GitHub API for the data listed below:</p> Text Only<pre><code>- Repository's Name\n- Main Language\n- Repository's Description\n- Project's Website\n- Readme Content\n- Current Number of Issues\n- Current Number of Forks\n</code></pre> <p>:param username: Owner of the repository.</p> <p>:type username: str</p> <p>:param repo: Repository's name itself.</p> <p>:type repo: str</p> <p>:param _response: Internal var for handling status code.</p> <p>:type _response: fastapi.Response</p> <p>:returns: DefaultPayload with the data mentioned above.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>async def get_global_repo_data_controller(username: str, repo: str, _response: FastAPIResponse) -&gt; DefaultPayload:\n    \"\"\"\n    Gets the repo and it's username and returns the required data.\n\n    By receiving the username and a repository, this coroutine fetches\n    the GitHub API for the data listed below:\n\n        - Repository's Name\n        - Main Language\n        - Repository's Description\n        - Project's Website\n        - Readme Content\n        - Current Number of Issues\n        - Current Number of Forks\n\n    :param username: Owner of the repository.\n    :type username: str\n    :param repo: Repository's name itself.\n    :type repo: str\n    :param _response: Internal var for handling status code.\n    :type _response: fastapi.Response\n    :returns: DefaultPayload with the data mentioned above.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    urls: dict[str, str] = {'repo': f'/repos/{username}/{repo}', 'readme': f'/repos/{username}/{repo}/readme'}\n    async with AsyncClient() as client:\n        tasks: dict[str, Coroutine[Any, Any, Response]] = {key: client.get(f'{GITHUB_API_URL}{url}') for key, url in urls.items()}\n        responses = await gather(*tasks.values())\n    result: dict[str, Any] = {key: response.json() for key, response in zip(tasks.keys(), responses)}\n    try:\n        return DefaultPayload(error=False, data=ProjectPayload(full_name=result['repo']['full_name'], language=result['repo']['language'], description=result['repo']['description'], homepage=result['repo']['homepage'], readme=result['readme']['content'], open_issues_count=result['repo']['open_issues_count'], forks_count=result['repo']['forks_count']))\n    except KeyError:\n        _response.status_code = status.HTTP_404_NOT_FOUND\n        return DefaultPayload(error=True, data=ErrorPayload(error_type=ErrorType.GitHubFetchError, error=f'No result found for username = {username!r} and repo = {repo!r}'))\n</code></pre>"},{"location":"Codebase/services/project.py/#assertions","title":"Assertions","text":"<p>NO ASSERT DEFINED HERE</p>"},{"location":"Codebase/services/user.py/","title":"File: <code>user.py</code>","text":"<p>Role: Python Source Code</p> <p>Path: <code>..app.services</code></p> <p>No file docstring provided.</p>"},{"location":"Codebase/services/user.py/#imports","title":"Imports","text":""},{"location":"Codebase/services/user.py/#import-any","title":"<code>import Any</code>","text":"<p>Path: <code>typing</code></p> <p>Category: Native</p> SNIPPET Python<pre><code>from typing import Any\n</code></pre>"},{"location":"Codebase/services/user.py/#import-response","title":"<code>import Response</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import Response\n</code></pre>"},{"location":"Codebase/services/user.py/#import-status","title":"<code>import status</code>","text":"<p>Path: <code>fastapi</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from fastapi import status\n</code></pre>"},{"location":"Codebase/services/user.py/#import-asyncclient","title":"<code>import AsyncClient</code>","text":"<p>Path: <code>httpx</code></p> <p>Category: 3rd Party</p> SNIPPET Python<pre><code>from httpx import AsyncClient\n</code></pre>"},{"location":"Codebase/services/user.py/#import-errortype","title":"<code>import ErrorType</code>","text":"<p>Path: <code>app.schemas.error</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.error import ErrorType\n</code></pre>"},{"location":"Codebase/services/user.py/#import-defaultpayload","title":"<code>import DefaultPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import DefaultPayload\n</code></pre>"},{"location":"Codebase/services/user.py/#import-errorpayload","title":"<code>import ErrorPayload</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import ErrorPayload\n</code></pre>"},{"location":"Codebase/services/user.py/#import-githubuserdata","title":"<code>import GithubUserData</code>","text":"<p>Path: <code>app.schemas.payload</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.schemas.payload import GithubUserData\n</code></pre>"},{"location":"Codebase/services/user.py/#import-github_api_url","title":"<code>import GITHUB_API_URL</code>","text":"<p>Path: <code>app.utils</code></p> <p>Category: Local</p> SNIPPET Python<pre><code>from app.utils import GITHUB_API_URL\n</code></pre>"},{"location":"Codebase/services/user.py/#consts","title":"Consts","text":"<p>NO CONSTANT DEFINED HERE</p>"},{"location":"Codebase/services/user.py/#classes","title":"Classes","text":"<p>NO CLASS DEFINED HERE</p>"},{"location":"Codebase/services/user.py/#functions","title":"Functions","text":""},{"location":"Codebase/services/user.py/#def-get_github_user_data_controller","title":"<code>def get_github_user_data_controller</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>username: str, _response: FastAPIResponse</code></p> <p>Kwargs: <code>None</code></p> <p>Gets and returns every user's data.</p> <p>By receiving the username, this coroutine fetches the GitHub API for the data about that user</p> <p>:param username: Owner of the repository.</p> <p>:type username: str</p> <p>:param _response: Internal var for handling status code.</p> <p>:type _response: fastapi.Response</p> <p>:returns: DefaultPayload with the data mentioned above.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>async def get_github_user_data_controller(username: str, _response: FastAPIResponse) -&gt; DefaultPayload:\n    \"\"\"\n    Gets and returns every user's data.\n\n    By receiving the username, this coroutine fetches the GitHub API for the data\n    about that user\n\n    :param username: Owner of the repository.\n    :type username: str\n    :param _response: Internal var for handling status code.\n    :type _response: fastapi.Response\n    :returns: DefaultPayload with the data mentioned above.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    async with AsyncClient() as client:\n        data: Any = await client.get(f'{GITHUB_API_URL}/users/{username}')\n        data = data.json()\n    try:\n        assert data['status'] == '404'\n        _response.status_code = status.HTTP_404_NOT_FOUND\n        return DefaultPayload(error=True, data=ErrorPayload(error_type=ErrorType.GitHubFetchError, error=f'No GitHub account found for username = {username!r}'))\n    except KeyError:\n        return DefaultPayload(error=False, data=GithubUserData(**data))\n</code></pre>"},{"location":"Codebase/services/user.py/#def-get_github_user_repos_controller","title":"<code>def get_github_user_repos_controller</code>","text":"<p>Type: <code>Coroutine</code></p> <p>Return Type: <code>DefaultPayload</code></p> <p>Decorators: <code>None</code></p> <p>Args: <code>username: str, _response: FastAPIResponse</code></p> <p>Kwargs: <code>None</code></p> <p>Gets and returns every user's repos.</p> <p>By receiving the username, this coroutine fetches the GitHub API for every repository from that username.</p> <p>:param username: Owner of the repository.</p> <p>:type username: str</p> <p>:param _response: Internal var for handling status code.</p> <p>:type _response: fastapi.Response</p> <p>:returns: DefaultPayload with the data mentioned above.</p> <p>:rtype: app.schemas.payload.DefaultPayload :raises: Nothing</p> SNIPPET Python<pre><code>async def get_github_user_repos_controller(username: str, _response: FastAPIResponse) -&gt; DefaultPayload:\n    \"\"\"\n    Gets and returns every user's repos.\n\n    By receiving the username, this coroutine fetches the GitHub API for\n    every repository from that username.\n\n    :param username: Owner of the repository.\n    :type username: str\n    :param _response: Internal var for handling status code.\n    :type _response: fastapi.Response\n    :returns: DefaultPayload with the data mentioned above.\n    :rtype: app.schemas.payload.DefaultPayload\n    :raises: Nothing\n    \"\"\"\n    async with AsyncClient() as client:\n        data: Any = await client.get(f'{GITHUB_API_URL}/users/{username}/repos')\n        data = data.json()\n        print(data)\n    try:\n        assert data['status'] == '404'\n        _response.status_code = status.HTTP_404_NOT_FOUND\n        return DefaultPayload(error=True, data=ErrorPayload(error_type=ErrorType.GitHubFetchError, error=f'No GitHub account found for username = {username!r}'))\n    except TypeError:\n        return DefaultPayload(error=False, data=data)\n</code></pre>"},{"location":"Codebase/services/user.py/#assertions","title":"Assertions","text":""},{"location":"Codebase/services/user.py/#assert-datastatus-404","title":"<code>assert data['status'] == '404'</code>","text":"<p>Message: <code>None</code></p> SNIPPET Python<pre><code>assert data['status'] == '404'\n</code></pre>"},{"location":"Codebase/services/user.py/#assert-datastatus-404_1","title":"<code>assert data['status'] == '404'</code>","text":"<p>Message: <code>None</code></p> SNIPPET Python<pre><code>assert data['status'] == '404'\n</code></pre>"}]}